//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.color` struct is generated, and contains static references to 13 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentGreen`.
    var accentGreen: RswiftResources.ColorResource { .init(name: "AccentGreen", path: [], bundle: bundle) }

    /// Color `AccentOrange`.
    var accentOrange: RswiftResources.ColorResource { .init(name: "AccentOrange", path: [], bundle: bundle) }

    /// Color `AccentRed`.
    var accentRed: RswiftResources.ColorResource { .init(name: "AccentRed", path: [], bundle: bundle) }

    /// Color `BasePrimary`.
    var basePrimary: RswiftResources.ColorResource { .init(name: "BasePrimary", path: [], bundle: bundle) }

    /// Color `BaseSurface1`.
    var baseSurface1: RswiftResources.ColorResource { .init(name: "BaseSurface1", path: [], bundle: bundle) }

    /// Color `BaseSurface2`.
    var baseSurface2: RswiftResources.ColorResource { .init(name: "BaseSurface2", path: [], bundle: bundle) }

    /// Color `PaleGreenBackground`.
    var paleGreenBackground: RswiftResources.ColorResource { .init(name: "PaleGreenBackground", path: [], bundle: bundle) }

    /// Color `PaleOrangeBackground`.
    var paleOrangeBackground: RswiftResources.ColorResource { .init(name: "PaleOrangeBackground", path: [], bundle: bundle) }

    /// Color `RoleCellBackground`.
    var roleCellBackground: RswiftResources.ColorResource { .init(name: "RoleCellBackground", path: [], bundle: bundle) }

    /// Color `TextAndIconsPrimary`.
    var textAndIconsPrimary: RswiftResources.ColorResource { .init(name: "TextAndIconsPrimary", path: [], bundle: bundle) }

    /// Color `TextAndIconsSecondary`.
    var textAndIconsSecondary: RswiftResources.ColorResource { .init(name: "TextAndIconsSecondary", path: [], bundle: bundle) }

    /// Color `TextIconsTertiary`.
    var textIconsTertiary: RswiftResources.ColorResource { .init(name: "TextIconsTertiary", path: [], bundle: bundle) }

    /// Color `TextIconsWhite`.
    var textIconsWhite: RswiftResources.ColorResource { .init(name: "TextIconsWhite", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 25 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `ArrowIcon`.
    var arrowIcon: RswiftResources.ImageResource { .init(name: "ArrowIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EditIcon`.
    var editIcon: RswiftResources.ImageResource { .init(name: "EditIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `EmptyStateInProfile`.
    var emptyStateInProfile: RswiftResources.ImageResource { .init(name: "EmptyStateInProfile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ErrorStateInProfile`.
    var errorStateInProfile: RswiftResources.ImageResource { .init(name: "ErrorStateInProfile", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Image`.
    var image: RswiftResources.ImageResource { .init(name: "Image", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `addPhotoImage`.
    var addPhotoImage: RswiftResources.ImageResource { .init(name: "addPhotoImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `chatIcon`.
    var chatIcon: RswiftResources.ImageResource { .init(name: "chatIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkboxChecked`.
    var checkboxChecked: RswiftResources.ImageResource { .init(name: "checkboxChecked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `checkboxUnchecked`.
    var checkboxUnchecked: RswiftResources.ImageResource { .init(name: "checkboxUnchecked", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `defaultTeamImage`.
    var defaultTeamImage: RswiftResources.ImageResource { .init(name: "defaultTeamImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `documentIcon`.
    var documentIcon: RswiftResources.ImageResource { .init(name: "documentIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ellipsisIcon`.
    var ellipsisIcon: RswiftResources.ImageResource { .init(name: "ellipsisIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emptySearchState`.
    var emptySearchState: RswiftResources.ImageResource { .init(name: "emptySearchState", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `filePlusImage`.
    var filePlusImage: RswiftResources.ImageResource { .init(name: "filePlusImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `filterIcon`.
    var filterIcon: RswiftResources.ImageResource { .init(name: "filterIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `launchScreenImage`.
    var launchScreenImage: RswiftResources.ImageResource { .init(name: "launchScreenImage", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `lockIcon`.
    var lockIcon: RswiftResources.ImageResource { .init(name: "lockIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `newMessageIcon`.
    var newMessageIcon: RswiftResources.ImageResource { .init(name: "newMessageIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `noResultsSearchState`.
    var noResultsSearchState: RswiftResources.ImageResource { .init(name: "noResultsSearchState", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `profileIcon`.
    var profileIcon: RswiftResources.ImageResource { .init(name: "profileIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchIcon`.
    var searchIcon: RswiftResources.ImageResource { .init(name: "searchIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchPlayerIcon`.
    var searchPlayerIcon: RswiftResources.ImageResource { .init(name: "searchPlayerIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `searchTeamIcon`.
    var searchTeamIcon: RswiftResources.ImageResource { .init(name: "searchTeamIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `teamIcon`.
    var teamIcon: RswiftResources.ImageResource { .init(name: "teamIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `userIcon`.
    var userIcon: RswiftResources.ImageResource { .init(name: "userIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 14 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `BubbleCell`.
    var bubbleCell: RswiftResources.NibReference<BubbleCell> { .init(name: "BubbleCell", bundle: bundle) }

    /// Nib `CapitanStatusView`.
    var capitanStatusView: RswiftResources.NibReference<CapitanStatusView> { .init(name: "CapitanStatusView", bundle: bundle) }

    /// Nib `FilterCell`.
    var filterCell: RswiftResources.NibReference<FilterCell> { .init(name: "FilterCell", bundle: bundle) }

    /// Nib `InfoView`.
    var infoView: RswiftResources.NibReference<InfoView> { .init(name: "InfoView", bundle: bundle) }

    /// Nib `MyApplicationCell`.
    var myApplicationCell: RswiftResources.NibReference<MyApplicationCell> { .init(name: "MyApplicationCell", bundle: bundle) }

    /// Nib `RegisterTeamView`.
    var registerTeamView: RswiftResources.NibReference<RegisterTeamView> { .init(name: "RegisterTeamView", bundle: bundle) }

    /// Nib `SearchPlayersCell`.
    var searchPlayersCell: RswiftResources.NibReference<SearchPlayersCell> { .init(name: "SearchPlayersCell", bundle: bundle) }

    /// Nib `SearchTeamsCell`.
    var searchTeamsCell: RswiftResources.NibReference<SearchTeamsCell> { .init(name: "SearchTeamsCell", bundle: bundle) }

    /// Nib `TeamErrorStateView`.
    var teamErrorStateView: RswiftResources.NibReference<TeamErrorStateView> { .init(name: "TeamErrorStateView", bundle: bundle) }

    /// Nib `TeamInfoIsLoadingView`.
    var teamInfoIsLoadingView: RswiftResources.NibReference<TeamInfoIsLoadingView> { .init(name: "TeamInfoIsLoadingView", bundle: bundle) }

    /// Nib `TeamIsRegisteredView`.
    var teamIsRegisteredView: RswiftResources.NibReference<TeamIsRegisteredView> { .init(name: "TeamIsRegisteredView", bundle: bundle) }

    /// Nib `TeamRegistrationInProgressView`.
    var teamRegistrationInProgressView: RswiftResources.NibReference<TeamRegistrationInProgressView> { .init(name: "TeamRegistrationInProgressView", bundle: bundle) }

    /// Nib `TeamsApplicationsView`.
    var teamsApplicationsView: RswiftResources.NibReference<TeamsApplicationsView> { .init(name: "TeamsApplicationsView", bundle: bundle) }

    /// Nib `WarningView`.
    var warningView: RswiftResources.NibReference<WarningView> { .init(name: "WarningView", bundle: bundle) }

    func validate() throws {
      if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in nib 'BubbleCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "RoleCellBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'RoleCellBackground' is used in nib 'BubbleCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in nib 'CapitanStatusView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'CapitanStatusView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "RoleCellBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'RoleCellBackground' is used in nib 'CapitanStatusView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "checkboxUnchecked", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'checkboxUnchecked' is used in nib 'FilterCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'FilterCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in nib 'FilterCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'InfoView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in nib 'InfoView', but couldn't be loaded.") }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash.circle.fill") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'trash.circle.fill' is used in nib 'MyApplicationCell', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in nib 'MyApplicationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'MyApplicationCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in nib 'MyApplicationCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ArrowIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowIcon' is used in nib 'RegisterTeamView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "documentIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'documentIcon' is used in nib 'RegisterTeamView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'RegisterTeamView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'SearchPlayersCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in nib 'SearchPlayersCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'SearchTeamsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in nib 'SearchTeamsCell', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in nib 'TeamErrorStateView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'TeamErrorStateView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'TeamInfoIsLoadingView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ArrowIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowIcon' is used in nib 'TeamIsRegisteredView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'TeamIsRegisteredView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in nib 'TeamIsRegisteredView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ArrowIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowIcon' is used in nib 'TeamRegistrationInProgressView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentOrange", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentOrange' is used in nib 'TeamRegistrationInProgressView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'TeamRegistrationInProgressView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "ArrowIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowIcon' is used in nib 'TeamsApplicationsView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "documentIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'documentIcon' is used in nib 'TeamsApplicationsView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in nib 'TeamsApplicationsView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Image", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Image' is used in nib 'WarningView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "AccentOrange", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentOrange' is used in nib 'WarningView', but couldn't be loaded.") }
      if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in nib 'WarningView', but couldn't be loaded.") }
    }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 15 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var authorizationCodeEntering: authorizationCodeEntering { .init(bundle: bundle) }
    var authorizationPhoneEntering: authorizationPhoneEntering { .init(bundle: bundle) }
    var editProfilePage: editProfilePage { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var myApplicationsPage: myApplicationsPage { .init(bundle: bundle) }
    var playersApplication: playersApplication { .init(bundle: bundle) }
    var profilePage: profilePage { .init(bundle: bundle) }
    var registerTeamPage: registerTeamPage { .init(bundle: bundle) }
    var registration: registration { .init(bundle: bundle) }
    var searchPlayersPage: searchPlayersPage { .init(bundle: bundle) }
    var searchTeamsPage: searchTeamsPage { .init(bundle: bundle) }
    var searchTeamsPlayerRoleFilter: searchTeamsPlayerRoleFilter { .init(bundle: bundle) }
    var teamApplication: teamApplication { .init(bundle: bundle) }
    var teamPage: teamPage { .init(bundle: bundle) }

    func authorizationCodeEntering(bundle: Foundation.Bundle) -> authorizationCodeEntering {
      .init(bundle: bundle)
    }
    func authorizationPhoneEntering(bundle: Foundation.Bundle) -> authorizationPhoneEntering {
      .init(bundle: bundle)
    }
    func editProfilePage(bundle: Foundation.Bundle) -> editProfilePage {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func myApplicationsPage(bundle: Foundation.Bundle) -> myApplicationsPage {
      .init(bundle: bundle)
    }
    func playersApplication(bundle: Foundation.Bundle) -> playersApplication {
      .init(bundle: bundle)
    }
    func profilePage(bundle: Foundation.Bundle) -> profilePage {
      .init(bundle: bundle)
    }
    func registerTeamPage(bundle: Foundation.Bundle) -> registerTeamPage {
      .init(bundle: bundle)
    }
    func registration(bundle: Foundation.Bundle) -> registration {
      .init(bundle: bundle)
    }
    func searchPlayersPage(bundle: Foundation.Bundle) -> searchPlayersPage {
      .init(bundle: bundle)
    }
    func searchTeamsPage(bundle: Foundation.Bundle) -> searchTeamsPage {
      .init(bundle: bundle)
    }
    func searchTeamsPlayerRoleFilter(bundle: Foundation.Bundle) -> searchTeamsPlayerRoleFilter {
      .init(bundle: bundle)
    }
    func teamApplication(bundle: Foundation.Bundle) -> teamApplication {
      .init(bundle: bundle)
    }
    func teamPage(bundle: Foundation.Bundle) -> teamPage {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.authorizationCodeEntering.validate()
      try self.authorizationPhoneEntering.validate()
      try self.editProfilePage.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.myApplicationsPage.validate()
      try self.playersApplication.validate()
      try self.profilePage.validate()
      try self.registerTeamPage.validate()
      try self.registration.validate()
      try self.searchPlayersPage.validate()
      try self.searchTeamsPage.validate()
      try self.searchTeamsPlayerRoleFilter.validate()
      try self.teamApplication.validate()
      try self.teamPage.validate()
    }


    /// Storyboard `AuthorizationCodeEntering`.
    struct authorizationCodeEntering: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AuthorizationCodeEntering"

      var authorizationCodeEnteringViewController: RswiftResources.StoryboardViewControllerIdentifier<AuthorizationCodeEnteringViewController> { .init(identifier: "AuthorizationCodeEnteringViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "newMessageIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'newMessageIcon' is used in storyboard 'AuthorizationCodeEntering', but couldn't be loaded.") }
        if UIKit.UIColor(named: "AccentRed", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentRed' is used in storyboard 'AuthorizationCodeEntering', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'AuthorizationCodeEntering', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'AuthorizationCodeEntering', but couldn't be loaded.") }
        if authorizationCodeEnteringViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'authorizationCodeEnteringViewController' could not be loaded from storyboard 'AuthorizationCodeEntering' as 'AuthorizationCodeEnteringViewController'.") }
      }
    }

    /// Storyboard `AuthorizationPhoneEntering`.
    struct authorizationPhoneEntering: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "AuthorizationPhoneEntering"

      var authorizationPhoneEnteringViewController: RswiftResources.StoryboardViewControllerIdentifier<AuthorizationPhoneEnteringViewController> { .init(identifier: "AuthorizationPhoneEnteringViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "lockIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'lockIcon' is used in storyboard 'AuthorizationPhoneEntering', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'AuthorizationPhoneEntering', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'AuthorizationPhoneEntering', but couldn't be loaded.") }
        if authorizationPhoneEnteringViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'authorizationPhoneEnteringViewController' could not be loaded from storyboard 'AuthorizationPhoneEntering' as 'AuthorizationPhoneEnteringViewController'.") }
      }
    }

    /// Storyboard `EditProfilePage`.
    struct editProfilePage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "EditProfilePage"

      var editProfilePageViewController: RswiftResources.StoryboardViewControllerIdentifier<EditProfilePageViewController> { .init(identifier: "EditProfilePageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "addPhotoImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'addPhotoImage' is used in storyboard 'EditProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'EditProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'EditProfilePage', but couldn't be loaded.") }
        if editProfilePageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'editProfilePageViewController' could not be loaded from storyboard 'EditProfilePage' as 'EditProfilePageViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "launchScreenImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'launchScreenImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Main"

      var mainViewController: RswiftResources.StoryboardViewControllerIdentifier<MainViewController> { .init(identifier: "MainViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if mainViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }
    }

    /// Storyboard `MyApplicationsPage`.
    struct myApplicationsPage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "MyApplicationsPage"

      var myApplicationsPageViewController: RswiftResources.StoryboardViewControllerIdentifier<MyApplicationsPageViewController> { .init(identifier: "MyApplicationsPageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "EmptyStateInProfile", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EmptyStateInProfile' is used in storyboard 'MyApplicationsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchIcon' is used in storyboard 'MyApplicationsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'MyApplicationsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in storyboard 'MyApplicationsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsTertiary' is used in storyboard 'MyApplicationsPage', but couldn't be loaded.") }
        if myApplicationsPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'myApplicationsPageViewController' could not be loaded from storyboard 'MyApplicationsPage' as 'MyApplicationsPageViewController'.") }
      }
    }

    /// Storyboard `PlayersApplication`.
    struct playersApplication: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "PlayersApplication"

      var playersApplicationViewController: RswiftResources.StoryboardViewControllerIdentifier<PlayersApplicationViewController> { .init(identifier: "PlayersApplicationViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "userIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userIcon' is used in storyboard 'PlayersApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'PlayersApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'PlayersApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'PlayersApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'PlayersApplication', but couldn't be loaded.") }
        if playersApplicationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'playersApplicationViewController' could not be loaded from storyboard 'PlayersApplication' as 'PlayersApplicationViewController'.") }
      }
    }

    /// Storyboard `ProfilePage`.
    struct profilePage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "ProfilePage"

      var profilePageViewController: RswiftResources.StoryboardViewControllerIdentifier<ProfilePageViewController> { .init(identifier: "ProfilePageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "ArrowIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'ArrowIcon' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "EditIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'EditIcon' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "documentIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'documentIcon' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "profileIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'profileIcon' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "userIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'userIcon' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsTertiary' is used in storyboard 'ProfilePage', but couldn't be loaded.") }
        if profilePageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profilePageViewController' could not be loaded from storyboard 'ProfilePage' as 'ProfilePageViewController'.") }
      }
    }

    /// Storyboard `RegisterTeamPage`.
    struct registerTeamPage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "RegisterTeamPage"

      var registerTeamPageViewController: RswiftResources.StoryboardViewControllerIdentifier<RegisterTeamPageViewController> { .init(identifier: "RegisterTeamPageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "addPhotoImage", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'addPhotoImage' is used in storyboard 'RegisterTeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'RegisterTeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'RegisterTeamPage', but couldn't be loaded.") }
        if registerTeamPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registerTeamPageViewController' could not be loaded from storyboard 'RegisterTeamPage' as 'RegisterTeamPageViewController'.") }
      }
    }

    /// Storyboard `Registration`.
    struct registration: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Registration"

      var registrationViewController: RswiftResources.StoryboardViewControllerIdentifier<RegistrationViewController> { .init(identifier: "RegistrationViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "AccentRed", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentRed' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'Registration', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'Registration', but couldn't be loaded.") }
        if registrationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'registrationViewController' could not be loaded from storyboard 'Registration' as 'RegistrationViewController'.") }
      }
    }

    /// Storyboard `SearchPlayersPage`.
    struct searchPlayersPage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SearchPlayersPage"

      var searchPlayersPageViewController: RswiftResources.StoryboardViewControllerIdentifier<SearchPlayersPageViewController> { .init(identifier: "SearchPlayersPageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "emptySearchState", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'emptySearchState' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filterIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filterIcon' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchPlayerIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchPlayerIcon' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "RoleCellBackground", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'RoleCellBackground' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsTertiary' is used in storyboard 'SearchPlayersPage', but couldn't be loaded.") }
        if searchPlayersPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchPlayersPageViewController' could not be loaded from storyboard 'SearchPlayersPage' as 'SearchPlayersPageViewController'.") }
      }
    }

    /// Storyboard `SearchTeamsPage`.
    struct searchTeamsPage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SearchTeamsPage"

      var searchTeamsPageViewController: RswiftResources.StoryboardViewControllerIdentifier<SearchTeamsPageViewController> { .init(identifier: "SearchTeamsPageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "emptySearchState", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'emptySearchState' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filterIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'filterIcon' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchTeamIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'searchTeamIcon' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsPrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsPrimary' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsTertiary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsTertiary' is used in storyboard 'SearchTeamsPage', but couldn't be loaded.") }
        if searchTeamsPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchTeamsPageViewController' could not be loaded from storyboard 'SearchTeamsPage' as 'SearchTeamsPageViewController'.") }
      }
    }

    /// Storyboard `SearchTeamsPlayerRoleFilter`.
    struct searchTeamsPlayerRoleFilter: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SearchTeamsPlayerRoleFilter"

      var searchTeamsPlayerRoleFilterViewController: RswiftResources.StoryboardViewControllerIdentifier<SearchTeamsPlayerRoleFilterViewController> { .init(identifier: "SearchTeamsPlayerRoleFilterViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'SearchTeamsPlayerRoleFilter', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'SearchTeamsPlayerRoleFilter', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'SearchTeamsPlayerRoleFilter', but couldn't be loaded.") }
        if searchTeamsPlayerRoleFilterViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'searchTeamsPlayerRoleFilterViewController' could not be loaded from storyboard 'SearchTeamsPlayerRoleFilter' as 'SearchTeamsPlayerRoleFilterViewController'.") }
      }
    }

    /// Storyboard `TeamApplication`.
    struct teamApplication: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "TeamApplication"

      var teamApplicationViewController: RswiftResources.StoryboardViewControllerIdentifier<TeamApplicationViewController> { .init(identifier: "TeamApplicationViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "teamIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'teamIcon' is used in storyboard 'TeamApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'TeamApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'TeamApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'TeamApplication', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'TeamApplication', but couldn't be loaded.") }
        if teamApplicationViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'teamApplicationViewController' could not be loaded from storyboard 'TeamApplication' as 'TeamApplicationViewController'.") }
      }
    }

    /// Storyboard `TeamPage`.
    struct teamPage: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "TeamPage"

      var teamPageViewController: RswiftResources.StoryboardViewControllerIdentifier<TeamPageViewController> { .init(identifier: "TeamPageViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "teamIcon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'teamIcon' is used in storyboard 'TeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BasePrimary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BasePrimary' is used in storyboard 'TeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "BaseSurface1", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'BaseSurface1' is used in storyboard 'TeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextAndIconsSecondary", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextAndIconsSecondary' is used in storyboard 'TeamPage', but couldn't be loaded.") }
        if UIKit.UIColor(named: "TextIconsWhite", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'TextIconsWhite' is used in storyboard 'TeamPage', but couldn't be loaded.") }
        if teamPageViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'teamPageViewController' could not be loaded from storyboard 'TeamPage' as 'TeamPageViewController'.") }
      }
    }
  }
}